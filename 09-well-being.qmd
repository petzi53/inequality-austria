# Well-Being {#sec-well-being}

```{r}
#| label: setup
#| results: hold
#| include: false

base::source(file = paste0(here::here(), "/R/helper.R"))

ggplot2::theme_set(ggplot2::theme_bw())
```

:::::: {#obj-chapter-template}
::::: my-objectives
::: my-objectives-header
My objective for this chapter
:::

::: my-objectives-container
In this chapter, I will take a first take on the well-being ranking data
provided by the different [World Happiness Reports
2012-2024](https://worldhappiness.report/analysis/)
[@whr-download-analysis].

There are figures for all countries trajectories during the years. This
also includes Austria [@helliwell2024a, p.10]. My general aim is to
provide a comparison of the series of rankings for Austria with other
selected countries. I will focus on the so-called Cantril ladder of
subjective life evaluation [@nilsson2024].

As far as I can see from my first inspection, there are at least three
challenges:

1.  **Compatibility**: Check if all the data are compatible.
2.  **Completeness**: Check if the data for the time series are
    complete. I noticed already that there is no Excel data file
    for 2013. Bu there data in a PDF file. How to get these data?
    Another issue are the number of observed countries by year. How to
    get consistent rankings if the number of countries varies?
3.  **Visualization** Choose an appropriate visualization of the data.
    There are already up-to-date (2005-2023) visualization of
    trajectories. But these plots are visualizing the absolute value of
    the life evaluations country-by-country as the following example of
    Austria shows.

![Series of the values of subjective life evaluations for Austria
(2005-2023)](img/09-austria-well-being-trajectory-min.png){#fig-09-life-evaluation-austria
fig-alt="alt-text" fig-align="center" width="80%"}


@fig-09-life-evaluation-austria is a valuable figure to compare the development of the Austrian life evaluation index. But it is not useful for a comparison with other countries. Here I am thinking of two different visualizations:

1. Series of several selected countries in one figure so that it facilitates a comparison. In this case I will develop a graph with different colored lines for different countries.
2. With another figure I will try to capture the changes in rankings of some selected countries. The development of the absolute values of the life evaluations does not necessarily reflect the progress inside  countries because they are also influenced by global developments (e.g., COVID-19).
:::
:::::
::::::



## Import data

### Folder and file oganization

The first step is to find the life-evaluation data for each year and to store the files for further R processing. I will store the files in the "whr" folder inside my "data" folder. (As I do not know the chapter number for this well-being chapter, I am not going to use my traditional  format "chapXX" ("XX" standing for the chapter number) but just "whr" as folder name.)

The `pb_create_folder()` function in the following code chunk checks if the folder already exists. If this is the case it leaves it untouched, otherwise it creates the folder at the desired path. The code for my private functions are in the file `helper.R` inside the `R` folder at root level of this working directory.

:::::{.my-resource}
:::{.my-resource-header}
:::::: {#lem-folder-structure}
: File Organization for WHR files
::::::
:::
::::{.my-resource-container}

I will organize the many files into several subfolders:

- **/data/**: main folder for all data files related this project
- **/data/whr/**: files related to the analysis of the the World Happiness Reports
- **/data/whr/excel/**: untouched original Excel files resp. the one PDF for the 2013 report (to prevent possible link rot at the original source)
- **/data/whr/rds/**: R objects of the original data of the Excel files
- **/data/whr/analysis/**: changed or created R objects during the analysis process
- **/data/whr/2013-coord/** R object containing page coordinates of the 2013 PDF file


:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-create-whr-folder}
: Create folders for data files of the World Happiness Reports
::::::
:::
::::{.my-r-code-container}



```{r}
#| label: create-whr-folders
#| code-fold: show

pb_create_folder(base::paste0(here::here(), "/data/"))
pb_create_folder(base::paste0(here::here(), "/data/whr"))
pb_create_folder(base::paste0(here::here(), "/data/whr/excel"))
pb_create_folder(base::paste0(here::here(), "/data/whr/rds"))
pb_create_folder(base::paste0(here::here(), "/data/whr/analysis"))
pb_create_folder(base::paste0(here::here(), "/data/whr/2013-coord"))
```

(*For this R code chunk is no output available*)


::::
:::::

::::
:::::

### Download and save WHR data


The next code chunks combines two actions for each year:

1. At first I had to get the URL manually. Starting from the [WHR-Analysis website](https://worldhappiness.report/analysis/) I had to open each year and to look for the "Appendices & data" link. There I had to look for a data file.
2. After downloading all data file as Excel files I had to inspect them manually to find the sheet with the Cantril ladder data. I had to note the sheet number for the appropriate download. (Default is sheet 1). Additionally I had to note the file format "xls" or "xlsx" for each year to call the correct function `readxl::read_xls` or `readxl::read_xlsx`. (I refrained from the format guessing with the more general `readxl::read_exel()` function.) Furthermore I had to skip the first three comment lines in the 2015 dataset.

I am using the utility package [downloader](https://cran.r-project.org/web/packages/downloader/index.html) by Winston Chang because it provides a wrapper for the `utils::download.file()` function with the advantage that the download procedure works on Windows, Mac OS X, and other Unix-like platforms.




:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-download-whr-data}
: Download Data for the World Happiness Reports (WHR)
::::::
:::
::::{.my-r-code-container}


**Run the code just once manually**. It will download the data from the World Happiness Report (WHR) website for every year where data are available.


```{r}
#| label: download-whr-data
#| eval: false

## 2024 #########################################
downloader::download(
    url = "https://happiness-report.s3.amazonaws.com/2024/DataForFigure2.1+with+sub+bars+2024.xls",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2024.xls")
)
WHR_data_2024 <- readxl::read_xls(base::paste0(here::here(), "/data/whr/excel/WHR-2024.xls"))
pb_save_data_file("whr/rds", WHR_data_2024, "WHR_data_2024.rds")

## 2023 #########################################
downloader::download(
    url = "https://happiness-report.s3.amazonaws.com/2023/DataForFigure2.1WHR2023.xls",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2023.xls")
)
WHR_data_2023 <- readxl::read_xls(base::paste0(here::here(), "/data/whr/excel/WHR-2023.xls"))
pb_save_data_file("whr/rds", WHR_data_2023, "WHR_data_2023.rds")

## 2022 #########################################
downloader::download(
    url = "https://happiness-report.s3.amazonaws.com/2022/Appendix_2_Data_for_Figure_2.1.xls",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2022.xls")
)
WHR_data_2022 <- readxl::read_xls(base::paste0(here::here(), "/data/whr/excel/WHR-2022.xls"))
pb_save_data_file("whr/rds", WHR_data_2022, "WHR_data_2022.rds")

## 2021 #########################################
downloader::download(
    url = "https://happiness-report.s3.amazonaws.com/2021/DataForFigure2.1WHR2021C2.xls",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2021.xls")
)
WHR_data_2021 <- readxl::read_xls(base::paste0(here::here(), "/data/whr/excel/WHR-2021.xls"))
pb_save_data_file("whr/rds", WHR_data_2021, "WHR_data_2021.rds")


# 2020 #########################################
downloader::download(
    url = "https://happiness-report.s3.amazonaws.com/2020/WHR20_DataForFigure2.1.xls",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2020.xls")
)
WHR_data_2020 <- readxl::read_xls(base::paste0(here::here(), "/data/whr/excel/WHR-2020.xls"))
pb_save_data_file("whr/rds", WHR_data_2020, "WHR_data_2020.rds")


# 2019 #########################################
downloader::download(
    url = "https://s3.amazonaws.com/happiness-report/2019/Chapter2OnlineData.xls",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2019.xls")
)
WHR_data_2019 <- readxl::read_xls(
    path = base::paste0(here::here(), "/data/whr/excel/WHR-2019.xls"), 
    sheet = 2)
pb_save_data_file("whr/rds", WHR_data_2019, "WHR_data_2019.rds")


# 2018 #########################################
downloader::download(
    url = "https://s3.amazonaws.com/happiness-report/2018/WHR2018Chapter2OnlineData.xls",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2018.xls")
)
WHR_data_2018 <- readxl::read_xls(
    path = base::paste0(here::here(), "/data/whr/excel/WHR-2018.xls"), 
    sheet = 2)
pb_save_data_file("whr/rds", WHR_data_2018, "WHR_data_2018.rds")


# 2017 #########################################
downloader::download(
    url = "https://s3.amazonaws.com/happiness-report/2017/online-data-chapter-2-whr-2017.xlsx",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2017.xlsx")
)
WHR_data_2017 <- readxl::read_xlsx(
    path = base::paste0(here::here(), "/data/whr/excel/WHR-2017.xlsx"), 
    sheet = 3)
pb_save_data_file("whr/rds", WHR_data_2017, "WHR_data_2017.rds")


# 2016 #########################################
downloader::download(
    url = "https://s3.amazonaws.com/happiness-report/2016/Online-data-for-chapter-2-whr-2016.xlsx",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2015.xlsx")
)
WHR_data_2016 <- readxl::read_xlsx(
    path = base::paste0(here::here(), "/data/whr/excel/WHR-2016.xlsx"), 
    sheet = 3)
pb_save_data_file("whr/rds", WHR_data_2016, "WHR_data_2016.rds")

# 2015 #########################################
downloader::download(
    url = "https://s3.amazonaws.com/happiness-report/2015/Chapter2OnlineData_Expanded-with-Trust-and-Governance.xlsx",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2015.xlsx")
)
WHR_data_2015 <- readxl::read_xlsx(
    path = base::paste0(here::here(), "/data/whr/excel/WHR-2015.xlsx"), 
    sheet = 2,
    skip = 3)
pb_save_data_file("whr/rds", WHR_data_2015, "WHR_data_2015.rds")

## 2014 missing #######################################



## 2013 data in PDF ##################################
## store PDF file locally to prevent link rotting
downloader::download(
    url = "https://s3.amazonaws.com/happiness-report/2013/Chapter-2_online-appendix_9-5-13_final.pdf",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-PDF-2013.pdf")
)

## WHR_data_2013 will be generated and saved in the next section. 


# 2012 #########################################
downloader::download(
    url = "https://happiness-report.s3.amazonaws.com/2012/2012.xlsx",
    destfile = base::paste0(here::here(), "/data/whr/excel/WHR-2012.xlsx")
)
WHR_data_2012 <- readxl::read_xlsx(
    path = base::paste0(here::here(), "/data/whr/excel/WHR-2012.xlsx"), 
    sheet = 2)
pb_save_data_file("whr/rds", WHR_data_2012, "WHR_data_2012.rds")

```

(*For this R code chunk is no output available*)


::::
:::::

## Extract 2013 WHR Data from PDF

Data for the [World Happiness Report 2013](https://worldhappiness.report/ed/2013/#appendices-and-data) are not available in Excel format, unlike data from the other reports. Instead, the data are provided as a PDF file. (See also the second question of the [Frequently Asked Question](https://s3.amazonaws.com/happiness-report/2013/WHR-2013_FAQs_final.pdf))

This section extracts data I am interested in --- the survey measure of SWB (Subjective Well-being) from the Gallup World Poll (GWP) --- with the help of the `tabulapdf` package.

At first, I had to look for an appropriate R package because the one I had already used ([tabulizer](https://cran.r-project.org/web/packages/tabulizer/index.html)) was removed from CRAN. I found several packages for extracting PDF text (e.g., [pdftools](https://docs.ropensci.org/pdftools/), [PDE](https://cran.r-project.org/web/packages/PDE/vignettes/PDE.html), [PDFR](https://github.com/AllanCameron/PDFR)), but only [tabulapdf](https://docs.ropensci.org/tabulapdf/) is specialized in extracting table data.

I read the [introductory vignette](https://docs.ropensci.org/tabulapdf/articles/tabulapdf.html) completely because only in the final section I found a solution for my specific PDF. To understand the descriptions of the problems I had to master have a look at [Chapter 2 Appendix](https://s3.amazonaws.com/happiness-report/2013/Chapter-2_online-appendix_9-5-13_final.pdf). We need the cantril ladder data presented in "Table A2. National Averages in 2010-12". To extract the data I had to overcome three separate problems:

1. Table A2 spans over several pages (1-6).
2. On page 6 starts already the next table "Table A3. National Averages in 2005-07" which has to be excluded.
3. Pages 2-6 do not have column names.
4. Some of the column names in page 1 span two lines

The difficulties 1 and 2 arise because `tabulapdf` works page-oriented. Difficulty 3 originates from a faulty table design in the PDF. Difficulty 4 is a common problem that can be solved by setting the `col_names` argument to `FALSE`.

The solution I found is an [interactive table extraction](https://docs.ropensci.org/tabulapdf/articles/tabulapdf.html#interactive-table-extraction) for each page with the `tabulapdf::locate_area()` function and to select only the figures without columns names as demonstrated in the [use case section](https://docs.ropensci.org/tabulapdf/articles/tabulapdf.html#use-case-covid-19-treatments-in-italy) of the vignette.

Tidying the dataset for WHR 2013 includes to join country names if the span two lines into one column name and to delete the empty lines consisting of just NA's. Note also that there is a data entry error in the original PDF (see: page 5, second last line, column 6 from the right) that has to be corrected.


:::::{.my-code-collection}
:::{.my-code-collection-header}
:::::: {#exm-extract-whr-table-data-2013}
: Extract WHR 2013 Table Data from PDF and Tidy Data
::::::
:::
::::{.my-code-collection-container}

::: {.panel-tabset}

###### Extract

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-extract-pdf-table}
: Extract 2013 Table Data from PDF
::::::
:::
::::{.my-r-code-container}

**Run the code just once manually**. It will download the WHR 2013 PDF, generate interactively the table coordinates and save them for further processing.

```{r}
#| label: extract-pdf-table
#| eval: false

library(tabulapdf)

# set Java memory limit to 600 MB (optional)
options(java.parameters = "-Xmx600m")

# get the remote file and copy it to a temporary directory internally handled by R
f <- "https://s3.amazonaws.com/happiness-report/2013/Chapter-2_online-appendix_9-5-13_final.pdf"

# manual interactivity selection
# appropriate page will appear in the RStudio viewer
# point and drag to locate the areas coordinates
# see details in screenshot for interactive table extraction
# https://docs.ropensci.org/tabulapdf/articles/tabulapdf.html#interactive-table-extraction

page1 <- locate_areas(f, pages = 1)[[1]]
page2_5 <- locate_areas(f, pages = 2)[[1]]
page6 <- locate_areas(f, pages = 6)[[1]]


## store areas coordinates of WHR 2013 PDF data 
## into "/data/whr/2013-coord" created at @cnj-create-whr-folder

pb_save_data_file("whr/2013-coord", page1, "page1.rds")
pb_save_data_file("whr/2013-coord", page2_5, "page2_5.rds")
pb_save_data_file("whr/2013-coord", page6, "page6.rds")

```

(*For this R code chunk is no output available*)
::::
:::::


###### Tidy PDF Data

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-tidy-pdf-data}
: Tidy 2013 WHR Data
::::::
:::
::::{.my-r-code-container}

**Run the code just once manually**. It will restore the coordinates of the table data for the WHR 2013 PDF, tidy the dataset and save the result as R data object in `.rds` format.

```{r}
#| label: tidy-pdf-data
#| eval: false


page1 <- base::readRDS("data/whr/2013-coord/page1.rds")
page2_5 <- base::readRDS("data/whr/2013-coord/page2_5.rds")
page6 <- base::readRDS("data/whr/2013-coord/page6.rds")

table1 <- extract_tables(
    f,
    pages = 1, 
    guess = FALSE, 
    col_names = FALSE,
    area = list(page1)
)

table2_5 <- extract_tables(
    f,
    pages = c(2, 3, 4, 5), 
    guess = FALSE, 
    col_names = FALSE,
    area = list(page2_5)
)

table6 <- extract_tables(
    f,
    pages = 6, 
    guess = FALSE, 
    col_names = FALSE,
    area = list(page6)
)

WHR_data_2013 <- dplyr::bind_rows(table1[[1]], 
                 table2_5[[1]], table2_5[[2]], table2_5[[3]], table2_5[[4]], 
                 table6[[1]])

column_names = c("Country", "Region", "Ladder", "Social support",
                 "Freedom", "Corruption", "Donation", "Generosity",
                 "Positive affect", "Negative affect", "Happiness (Yesterday)",
                 "GDP per capita", "Healthy life expectancy")

WHR_data_2013 <- WHR_data_2013 |> 
    dplyr::rename_with(~column_names, dplyr::everything()) |> 

WHR_data_2013[17, 1] <- "Bosnia and Herzegovina"
WHR_data_2013[27, 1] <- "Central African Republic"
WHR_data_2013[34, 1] <- "Congo (Brazzaville)"
WHR_data_2013[43, 1] <- "Dominican Republic"
WHR_data_2013[146, 1] <- "Trinidad and Tobago"
WHR_data_2013[154, 1] <- "United Arab Emirates"

## missing data (data is in wrong previous NA row)
## the error already appears in the original PDF 
## (see: page 5, second last line, column 6 from the right)
WHR_data_2013[154, 6] <- 0.355

WHR_data_2013 <- na.omit(WHR_data_2013)


pb_save_data_file("whr/rds", WHR_data_2013, "WHR_data_2013.rds")
```

(*For this R code chunk is no output available*)

::::
:::::

:::

::::
:::::

***





## Inspect Data

:::::{.my-code-collection}
:::{.my-code-collection-header}
:::::: {#exm-inspect-whr-data}
: Inspect WHR data that contains ladder score and ranking
::::::
:::
::::{.my-code-collection-container}

::: {.panel-tabset}

###### 2024

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2024}
: Glimpse at WHR 2024 ladder score data
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: glimpse-whr-data-2024

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2024.rds"))
```

::::
:::::


###### 2023

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2023}
: Glimpse at WHR 2023 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2023

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2023.rds"))
```


::::
:::::

###### 2022

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2022}
: Glimpse at WHR 2022 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2022

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2022.rds"))
```


::::
:::::

###### 2021

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2021}
: Glimpse at WHR 2021 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2021

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2021.rds"))
```


::::
:::::

###### 2020

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2020}
: Glimpse at WHR 2019 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2020

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2020.rds"))
```


::::
:::::

###### 2019

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2019}
: Glimpse at WHR 2019 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2019

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2019.rds"))
```



::::
:::::

###### 2018

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2018}
: Glimpse at WHR 2018 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2018

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2018.rds"))
```


::::
:::::

###### 2017

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2017}
: Glimpse at WHR 2017 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2017

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2017.rds"))
```


::::
:::::

###### 2016

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2016}
: Glimpse at WHR 2016 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2016

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2016.rds"))
```



::::
:::::


###### 2015

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2015}
: Glimpse at WHR 2015 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2015

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2015.rds"))
```


::::
:::::

###### 2013

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2013}
: Glimpse at WHR 2013 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2013

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2013.rds"))

```



::::
:::::


###### 2012

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-glimpse-whr-data-2012}
: Glimpse at WHR 2012 ladder score data
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: glimpse-whr-data-2012

dplyr::glimpse(base::readRDS("data/whr/rds/WHR_data_2012.rds"))
```


::::
:::::


:::

::::
:::::

## Order of first two columns

Inspecting the datasets it turned out that there is some variety in the number of rows (observed countries), number of columns (variables) and column names. I am interested only in the country column and the "ladder score" (sometimes "happiness score" and in 2012 & 2013 just "ladder").

But for my later functions to create ladder score and ranks time series I need the same order of columns. The concrete name is not important because that can be changed in one line. My preferred order is:

- first column: country (or similar name)
- second column: ladder (or similar )

Inspecting @exm-inspect-whr-data I have to change the column order for 

- **2022**: Relocate first column 'RANK' to the end of the columns, as I will create column `rank` myself.
- **2021 and 2019**: Relocate second column 'Regional indicator' column 'Ladder score'.
- **2015**: Relocate first column 'WP5 Country' column 'Regional indicator' after column 'Ladder score'.
- **2013**: Move first column 'Region' after column 'Ladder'.

To leave the original files untouched but to persevere the same structure of the data object names I will rename those five files and append "_raw" at the end of the file name. The new ".rds" object with the two ordered columns (first = country, second = ladder score) will get the same name structure as the objects presented in the code chunks of @exm-inspect-whr-data ("WHR_data_" + year).

:::::{.my-code-collection}
:::{.my-code-collection-header}
:::::: {#exm-order-whr-columns}
: Order columns for several data frames
::::::
:::
::::{.my-code-collection-container}

::: {.panel-tabset}

###### 2022

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-whr-order-columns-2022}
: Relocate first column 'RANK' after the last column
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: whr-order-columns-2022
#| results: hold


WHR_data_2022_raw <-  base::readRDS("data/whr/rds/WHR_data_2022.rds")
pb_save_data_file("whr/rds", WHR_data_2022_raw, "WHR_data_2022_raw.rds")

WHR_data_2022 <- WHR_data_2022_raw |> 
    dplyr::relocate("RANK", .after = last_col())


dplyr::glimpse(WHR_data_2022)
pb_save_data_file("whr/rds", WHR_data_2022, "WHR_data_2022.rds")
```


::::
:::::


###### 2021

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-whr-order-columns-2021}
: Order columns for WHR 2021
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: whr-order-columns-2021
#| results: hold

WHR_data_2021_raw <-  base::readRDS("data/whr/rds/WHR_data_2021.rds")
pb_save_data_file("whr/rds", WHR_data_2021_raw, "WHR_data_2021_raw.rds")

WHR_data_2021 <- WHR_data_2021_raw |> 
    dplyr::relocate("Regional indicator", .after = "Ladder score")

dplyr::glimpse(WHR_data_2021)
pb_save_data_file("whr/rds", WHR_data_2021, "WHR_data_2021.rds")
```


::::
:::::

###### 2019

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-whr-order-columns-2019}
: Order columns for WHR 2019
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: whr-order-columns-2019
#| results: hold

WHR_data_2019_raw <-  base::readRDS("data/whr/rds/WHR_data_2019.rds")
pb_save_data_file("whr/rds", WHR_data_2019_raw, "WHR_data_2019_raw.rds")

WHR_data_2019 <- WHR_data_2019_raw  
#     dplyr::relocate("Regional indicator", .after = "Ladder score")

dplyr::glimpse(WHR_data_2019)
pb_save_data_file("whr/rds", WHR_data_2019, "WHR_data_2019.rds")
```



::::
:::::

###### 2015

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-whr-order-columns-2015}
: Order columns for WHR 2015
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: whr-order-columns-2015
#| results: hold

WHR_data_2015_raw <-  base::readRDS("data/whr/rds/WHR_data_2015.rds")
pb_save_data_file("whr/rds", WHR_data_2015_raw, "WHR_data_2015_raw.rds")


WHR_data_2015 <- WHR_data_2015_raw  |> 
    dplyr::relocate("WP5 Country", .after = "Ladder score") |> 
    dplyr::relocate("Regional indicator", .after = "Ladder score")

dplyr::glimpse(WHR_data_2015)
pb_save_data_file("whr/rds", WHR_data_2015, "WHR_data_2015.rds")
```


::::
:::::

###### 2013

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-whr-order-columns-2013}
: Order columns for WHR 2013
::::::
:::
::::{.my-r-code-container}

2013 is the only year where the data are arranged by country and not by descending ladder score. I will therefore change the sorting to get compatibility with the other years.

```{r}
#| label: whr-order-columns-2013
#| results: hold

WHR_data_2013_raw <-  base::readRDS("data/whr/rds/WHR_data_2013.rds")
pb_save_data_file("whr/rds", WHR_data_2013_raw, "WHR_data_2013_raw.rds")

WHR_data_2013 <- WHR_data_2013_raw |> 
    dplyr::relocate("Region", .after = "Ladder") |> 
    dplyr::arrange(dplyr::desc(Ladder))

dplyr::glimpse(WHR_data_2013)
pb_save_data_file("whr/rds", WHR_data_2013, "WHR_data_2013.rds")
```


::::
:::::

:::

::::
:::::

***

## Create Dataset 

For comparisons I need a dataset with the variables

- Country (`country`)
- Ladder score for every year (`l_2012`, `l_2013`, …)
- Rank for every year (`r_2012`, `r_2013`, …)



:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-create-whr-dataset}
: Create WHR dataset with country, ladder score and rank
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: create-whr-dataset
#| results: hold

pb_create_ladder_table <- function(year) {
    string_orig <- base::paste0("data/whr/rds/WHR_data_", year, ".rds")
    df_orig <- base::readRDS(string_orig)
    df_new <- base::paste0("WHR_", year)
    l_year <- paste0("l_", year)
    r_year <- paste0("r_", year)
    
    df_new <- df_orig |> 
        dplyr::select(1,2) |> 
        dplyr::mutate(r_year = dplyr::row_number()) |> 
        dplyr::rename_with(.fn = ~c("country", l_year, r_year)) |> 
        dplyr::arrange(country)
}

ladder_2024 <- pb_create_ladder_table(2024)
pb_save_data_file("whr/analysis", ladder_2024, "WHR_ladder_2024.rds")

ladder_2023 <- pb_create_ladder_table(2023)
pb_save_data_file("whr/analysis", ladder_2023, "WHR_ladder_2023.rds")

ladder_2022 <- pb_create_ladder_table(2022)
pb_save_data_file("whr/analysis", ladder_2022, "WHR_ladder_2022.rds")

ladder_2021 <- pb_create_ladder_table(2021)
pb_save_data_file("whr/analysis", ladder_2021, "WHR_ladder_2021.rds")

ladder_2019 <- pb_create_ladder_table(2019)
pb_save_data_file("whr/analysis", ladder_2019, "WHR_ladder_2019.rds")

ladder_2019 <- pb_create_ladder_table(2019)
pb_save_data_file("whr/analysis", ladder_2019, "WHR_ladder_2019.rds")

ladder_2017 <- pb_create_ladder_table(2017)
pb_save_data_file("whr/analysis", ladder_2017, "WHR_ladder_2017.rds")

ladder_2017 <- pb_create_ladder_table(2017)
pb_save_data_file("whr/analysis", ladder_2017, "WHR_ladder_2017.rds")

ladder_2015 <- pb_create_ladder_table(2015)
pb_save_data_file("whr/analysis", ladder_2015, "WHR_ladder_2015.rds")

ladder_2015 <- pb_create_ladder_table(2015)
pb_save_data_file("whr/analysis", ladder_2015, "WHR_ladder_2015.rds")

ladder_2013 <- pb_create_ladder_table(2013)
pb_save_data_file("whr/analysis", ladder_2013, "WHR_ladder_2013.rds")

ladder_2012 <- pb_create_ladder_table(2012)
pb_save_data_file("whr/analysis", ladder_2012, "WHR_ladder_2012.rds")



```


::::
:::::

## Join ladder data

We have now prepared the data for every year separately and can now join them to a single tibble.

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-join-ladder-data-raw}
: Join ladder data from all years
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: join-ladder-data-raw
#| eval: false

whr_join_raw <- dplyr::full_join(ladder_2024, ladder_2023, by = "country") |> 
    dplyr::full_join(ladder_2022, by = "country") |> 
    dplyr::full_join(ladder_2021, by = "country") |> 
    dplyr::full_join(ladder_2019, by = "country") |> 
    dplyr::full_join(ladder_2019, by = "country") |> 
    dplyr::full_join(ladder_2017, by = "country") |> 
    dplyr::full_join(ladder_2017, by = "country") |> 
    dplyr::full_join(ladder_2015, by = "country") |> 
    dplyr::full_join(ladder_2015, by = "country") |> 
    dplyr::full_join(ladder_2013, by = "country") |> 
    dplyr::full_join(ladder_2012, by = "country")


pb_save_data_file("whr/analysis", whr_join_raw, "whr_join_raw.rds")

whr_join_raw1 <- dplyr::full_join(ladder_2024, ladder_2023, by = "country")
```


::::
:::::

## TEST CHUNKS

`r glossary("CRAN")`

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-prepare-test-figures}
: Numbered R Code Titled
::::::
:::
::::{.my-r-code-container}

```{r}
#| label: prepare-test-figures
#| eval: false


whr_join_raw <-  base::readRDS("data/whr/analysis/whr_join_raw.rds")

df_ladder <- whr_join_raw |> 
    dplyr::select(c(1, dplyr::starts_with("l_"))) |> 
    dplyr::filter(country %in% c(
        "Austria", 
        "Germany",
        "United Kingdom",
        "United States",
        "Finland"
        )) |>
    tidyr::pivot_longer(cols = c(l_2024:l_2012), 
                         names_to = "year", 
                         values_to = "score")

p1 <- ggplot2::ggplot(df_ladder, ggplot2::aes(
        x = year , 
        y = score, 
        color = country,
        group = country)) +
    ggplot2::geom_line() 

p1


df_rank <- whr_join_raw |> 
    dplyr::select(c(1, dplyr::starts_with("r_"))) |> 
    dplyr::filter(country %in% c("Austria", 
                                 "Germany", 
                                 "United Kingdom",
                                 "United States",
                                 "Finland")) |>
    tidyr::pivot_longer(cols = c(r_2024:r_2012), 
                         names_to = "year", 
                         values_to = "rank")

p2 <- ggplot2::ggplot(df_rank, ggplot2::aes(
        x = year , 
        y = rank, 
        color = country,
        group = country)) +
    ggplot2::geom_line() 

p2




```


***

**Run the code just once manually**. It will download country classification data from the [World Bank webpage: "How does the World Bank classify countries?"](https://datahelpdesk.worldbank.org/knowledgebase/articles/378834-how-does-the-world-bank-classify-countries)

::::
:::::



:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-get-country-names}
: Numbered R Code Title
::::::
:::
::::{.my-r-code-container}
::: {#lst-chaplisting-ID}
```{r}
#| label: get-country-names
#| eval: false


whr_join_raw <-  base::readRDS("data/whr/analysis/whr_join_raw.rds")
country_class <-  base::readRDS("data/countries/country_class.rds") |> 
    # dplyr::rename(country = Economy) |> 
    dplyr::slice_head(n = 218)


whr_country_raw <- dplyr::full_join(
    whr_join_raw,
    country_class,
    dplyr::join_by(country == Economy)
)
```

Listing title
:::

::::
:::::


:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-whr-countries}
: Numbered R Code Title
::::::
:::
::::{.my-r-code-container}
::: {#lst-chaplisting-ID}
```{r}
#| label: clean-whr-countries
#| eval: false

WHR_names_2022 <-  base::readRDS("data/whr/rds/WHR_data_2022.rds") |> 
    dplyr::select(1:2) |> 
    rlang::set_names("country", "s_2022") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::slice_head(n = 146) |> 
    dplyr::arrange(country)
```

Listing title
:::

::::
:::::


:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names}
: Numbered R Code Title
::::::
:::
::::{.my-r-code-container}
::: {#lst-chaplisting-ID}
```{r}
#| label: clean-country-names
#| eval: false

WHR_names_2024 <- base::readRDS("data/whr/rds/WHR_data_2024.rds") |> 
    dplyr::select(1:2) |> 
    rlang::set_names(c("country", "s_2024")) |> 
    dplyr::arrange(country)

WHR_names_2023 <- base::readRDS("data/whr/rds/WHR_data_2023.rds") |> 
    dplyr::select(1:2) |> 
    rlang::set_names(c("country", "s_2023")) |> 
    dplyr::arrange(country)

WHR_names_24_23 <- dplyr::full_join(
    WHR_names_2024,
    WHR_names_2023,
    by = dplyr::join_by(country)
    )

WHR_names_24_22 <- dplyr::full_join(
    WHR_names_24_23,
    WHR_names_2022,
    by = dplyr::join_by(country)
    )
    
```

Listing title
:::

::::
:::::

## 2024



::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names}
: Clean WHR Country Names --- 2024
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Get file

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-country-names}
: Get file for official country names
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: get-file-for-country-names
#| eval: false

pb_create_folder(base::paste0(here::here(), "/data/"))
pb_create_folder(base::paste0(here::here(), "/data/countries"))


downloader::download(
    url = "https://datacatalogfiles.worldbank.org/ddh-published/0037712/DR0090755/CLASS.xlsx",
    destfile = base::paste0(here::here(), "/data/countries/country-class_world_bank.xlsx")
)
country_class <- readxl::read_xlsx(base::paste0(here::here(), "/data/countries/country-class_world_bank.xlsx")) 
pb_save_data_file("countries", country_class, "country_class.rds")

country_only <-  country_class |> 
    dplyr::select(Economy) |> 
    dplyr::rename(Country = Economy) |> 
    dplyr::slice_head(n = 218)
pb_save_data_file("countries", country_only, "country_only.rds")
```

(*For this R code chunk is no output available*)

::::
:::::


###### Country names 2024

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-country-names-2024}
: Country Names 2024
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2024

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2024}
: Before cleaning 2024
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2024

country_names <- base::readRDS("data/countries/country_only.rds")

names_2024 <- base::readRDS("data/whr/analysis/WHR_ladder_2024.rds") |> 
    dplyr::select(1)

country_2024 <- dplyr::full_join(
    country_names,
    names_2024,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2024
```

::::
:::::

###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2024}
: Cleaning 2024
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2024
#| code-fold: show


names_2024_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2024.rds") |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R. of China" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkiye" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "State of Palestine" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Yemen" ~"Yemen, Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        TRUE ~ country))
    
```

::::
:::::

###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2024}
: After cleaning 2024
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-clearning-2024

country_names <- base::readRDS("data/countries/country_only.rds")

names_2024_countries <- names_2024_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2024_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::



## 2023


::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2023}
: Clean WHR Country Names --- 2023
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2023}
: Country names for 2023
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2023

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2023}
: Before cleaning 2023
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2023

country_names <- base::readRDS("data/countries/country_only.rds")

names_2023 <- base::readRDS("data/whr/analysis/WHR_ladder_2023.rds") |> 
    dplyr::select(1)

country_2023 <- dplyr::full_join(
    country_names,
    names_2023,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2023
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2023}
: Cleaning of WHR country data 2023
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2023
#| code-fold: show


names_2023_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2023.rds") |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R. of China" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkiye" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "State of Palestine" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        TRUE ~ country))
    
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2023}
: After cleaning 2023
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2023

country_names <- base::readRDS("data/countries/country_only.rds")

names_2023_countries <- names_2023_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2023_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::


## 2022

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2022}
: Clean WHR Country Names --- 2022
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2022}
: Country names for 2022
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2022

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2022}
: Before cleaning 2022
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2022

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2022 <- base::readRDS("data/whr/analysis/WHR_ladder_2022.rds") |> 
    dplyr::select(1)

country_2022 <- dplyr::full_join(
    country_names,
    names_2022,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2022
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2022}
: Cleaning of WHR country data 2022
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2022
#| code-fold: show


names_2022_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2022.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R. of China" ~ "Hong Kong SAR, China",
        country == "Congo" ~ "Congo, Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Eswatini, Kingdom of" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        TRUE ~ country)) |> 
    # dplyr::filter(country != "xx" & country != "North Cyprus")  # difficult to understand
    dplyr::filter(!(country == "xx" | country == "North Cyprus")) # easier to understand
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2022}
: After cleaning 2022
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2022

country_names <- base::readRDS("data/countries/country_only.rds")

names_2022_countries <- names_2022_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2022_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::

## 2021

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2021}
: Clean WHR Country Names --- 2021
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2021}
: Country names for 2021
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2021

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2021}
: Before cleaning 2021
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2021

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2021 <- base::readRDS("data/whr/analysis/WHR_ladder_2021.rds") |> 
    dplyr::select(1)

country_2021 <- dplyr::full_join(
    country_names,
    names_2021,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2021
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2021}
: Cleaning of WHR country data 2021
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2021
#| code-fold: show


names_2021_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2021.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Czech Republic" ~"Czechia",
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R. of China" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Swaziland" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        TRUE ~ country)) |> 
    dplyr::filter(country != "North Cyprus")
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2021}
: After cleaning 2021
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2021

country_names <- base::readRDS("data/countries/country_only.rds")

names_2021_countries <- names_2021_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2021_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::

## 2020

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2020}
: Clean WHR Country Names --- 2020
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2020}
: Country names for 2020
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2020

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2020}
: Before cleaning 2020
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2020

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2020 <- base::readRDS("data/whr/analysis/WHR_ladder_2020.rds") |> 
    dplyr::select(1)

country_2020 <- dplyr::full_join(
    country_names,
    names_2020,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2020
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2020}
: Cleaning of WHR country data 2020
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2020
#| code-fold: show

names_2020_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2020.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Czech Republic" ~"Czechia",
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R. of China" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Swaziland" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        country == "Macedonia" ~ "North Macedonia",
        TRUE ~ country)) |> 
    dplyr::filter(country != "North Cyprus")
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2020}
: After cleaning 2020
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2020

country_names <- base::readRDS("data/countries/country_only.rds")

names_2020_countries <- names_2020_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2020_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::

## 2019

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2019}
: Clean WHR Country Names --- 2019
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2019}
: Country names for 2019
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2019

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2019}
: Before cleaning 2019
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2019

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2019 <- base::readRDS("data/whr/analysis/WHR_ladder_2019.rds") |> 
    dplyr::select(1)

country_2019 <- dplyr::full_join(
    country_names,
    names_2019,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2019
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2019}
: Cleaning of WHR country data 2019
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2019
#| code-fold: show

names_2019_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2019.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Czech Republic" ~"Czechia",
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R. of China" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Swaziland" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        country == "Macedonia" ~ "North Macedonia",
        country == "Syria" ~ "Syrian Arab Republic",
        TRUE ~ country)) |> 
    dplyr::filter(country != "North Cyprus")
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2019}
: After cleaning 2019
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2019

country_names <- base::readRDS("data/countries/country_only.rds")

names_2019_countries <- names_2019_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2019_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::

## 2018

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2018}
: Clean WHR Country Names --- 2018
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2018}
: Country names for 2018
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2018

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2018}
: Before cleaning 2018
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2018

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2018 <- base::readRDS("data/whr/analysis/WHR_ladder_2018.rds") |> 
    dplyr::select(1)

country_2018 <- dplyr::full_join(
    country_names,
    names_2018,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2018
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2018}
: Cleaning of WHR country data 2018
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2018
#| code-fold: show

names_2018_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2018.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Czech Republic" ~"Czechia",
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R. of China" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Swaziland" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        country == "Macedonia" ~ "North Macedonia",
        country == "Syria" ~ "Syrian Arab Republic",
        country == "Trinidad & Tobago" ~ "Trinidad and Tobago",
        TRUE ~ country)) |> 
    dplyr::filter(country != "Northern Cyprus")
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2018}
: After cleaning 2018
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2018

country_names <- base::readRDS("data/countries/country_only.rds")

names_2018_countries <- names_2018_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2018_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::

## 2017

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2017}
: Clean WHR Country Names --- 2017
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2017}
: Country names for 2017
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2017

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2017}
: Before cleaning 2017
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2017

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2017 <- base::readRDS("data/whr/analysis/WHR_ladder_2017.rds") |> 
    dplyr::select(1)

country_2017 <- dplyr::full_join(
    country_names,
    names_2017,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2017
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2017}
: Cleaning of WHR country data 2017
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2017
#| code-fold: show

names_2017_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2017.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Czech Republic" ~"Czechia",
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R., China" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Swaziland" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        country == "Macedonia" ~ "North Macedonia",
        country == "Syria" ~ "Syrian Arab Republic",
        country == "Trinidad & Tobago" ~ "Trinidad and Tobago",
        TRUE ~ country)) |> 
    dplyr::filter(country != "North Cyprus")
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2017}
: After cleaning 2017
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2017

country_names <- base::readRDS("data/countries/country_only.rds")

names_2017_countries <- names_2017_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2017_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::

## 2016

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2016}
: Clean WHR Country Names --- 2016
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2016}
: Country names for 2016
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2016

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2016}
: Before cleaning 2016
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2016

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2016 <- base::readRDS("data/whr/analysis/WHR_ladder_2016.rds") |> 
    dplyr::select(1)

country_2016 <- dplyr::full_join(
    country_names,
    names_2016,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2016
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2016}
: Cleaning of WHR country data 2016
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2016
#| code-fold: show

names_2016_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2016.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Czech Republic" ~"Czechia",
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Taiwan" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R., China" ~ "Hong Kong SAR, China",
        country == "Hong Kong" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Swaziland" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        country == "Macedonia" ~ "North Macedonia",
        country == "Syria" ~ "Syrian Arab Republic",
        country == "Trinidad & Tobago" ~ "Trinidad and Tobago",
        country == "Somaliland region" ~ "Somalia",
        TRUE ~ country)) |> 
    dplyr::filter(country != "North Cyprus")
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2016}
: After cleaning 2016
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2016

country_names <- base::readRDS("data/countries/country_only.rds")

names_2016_countries <- names_2016_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2016_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::

## 2015

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2015}
: Clean WHR Country Names --- 2015
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2015}
: Country names for 2015
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2015

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2015}
: Before cleaning 2015
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2015

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2015 <- base::readRDS("data/whr/analysis/WHR_ladder_2015.rds") |> 
    dplyr::select(1)

country_2015 <- dplyr::full_join(
    country_names,
    names_2015,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2015
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2015}
: Cleaning of WHR country data 2015
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2015
#| code-fold: show

names_2015_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2015.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Czech Republic" ~"Czechia",
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Taiwan" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R., China" ~ "Hong Kong SAR, China",
        country == "Hong Kong" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Swaziland" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        country == "Macedonia" ~ "North Macedonia",
        country == "Syria" ~ "Syrian Arab Republic",
        country == "Trinidad & Tobago" ~ "Trinidad and Tobago",
        country == "Somaliland region" ~ "Somalia",
        TRUE ~ country)) |> 
    dplyr::filter(country != "North Cyprus")
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2015}
: After cleaning 2015
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2015

country_names <- base::readRDS("data/countries/country_only.rds")

names_2015_countries <- names_2015_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2015_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::

## 2013

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2013}
: Clean WHR Country Names --- 2013
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2013}
: Country names for 2013
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2013

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2013}
: Before cleaning 2013
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2013

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2013 <- base::readRDS("data/whr/analysis/WHR_ladder_2013.rds") |> 
    dplyr::select(1)

country_2013 <- dplyr::full_join(
    country_names,
    names_2013,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2013
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2013}
: Cleaning of WHR country data 2013
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2013
#| code-fold: show

names_2013_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2013.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Czech Republic" ~"Czechia",
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Taiwan" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R., China" ~ "Hong Kong SAR, China",
        country == "Hong Kong" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Palestine" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Swaziland" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        country == "Macedonia" ~ "North Macedonia",
        country == "Syria" ~ "Syrian Arab Republic",
        country == "Trinidad & Tobago" ~ "Trinidad and Tobago",
        country == "Somaliland" ~ "Somalia",
        TRUE ~ country)) |> 
    dplyr::filter(country != "North Cyprus")
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2013}
: After cleaning 2013
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2013

country_names <- base::readRDS("data/countries/country_only.rds")

names_2013_countries <- names_2013_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2013_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::


## 2012

::: {.my-code-collection}
:::: {.my-code-collection-header}
:::::: {#exm-clean-country-names-2012}
: Clean WHR Country Names --- 2012
::::::

::::

::::{.my-code-collection-container}

::: {.panel-tabset}

###### Country names

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-clean-country-names-2012}
: Country names for 2012
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: country-names-2012

DT::datatable(base::readRDS("data/countries/country_only.rds"))
```



::::
:::::


###### Before cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-before-cleaning-2012}
: Before cleaning 2012
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: before-cleaning-2012

options(pillar.print_max = Inf)

country_names <- base::readRDS("data/countries/country_only.rds")

names_2012 <- base::readRDS("data/whr/analysis/WHR_ladder_2012.rds") |> 
    dplyr::select(1)

country_2012 <- dplyr::full_join(
    country_names,
    names_2012,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
country_2012
```

::::
:::::


###### Cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-cleaning-2012}
: Cleaning of WHR country data 2012
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: cleaning-2012
#| code-fold: show

names_2012_clean <- base::readRDS("data/whr/analysis/WHR_ladder_2012.rds") |> 
    dplyr::mutate(country = gsub("\\*", "", country)) |> 
    dplyr::mutate(country = dplyr::case_when(
        country == "Czech Republic" ~"Czechia",
        country == "Taiwan Province of China" ~"Taiwan, China",
        country == "Taiwan" ~"Taiwan, China",
        country == "Slovakia" ~ "Slovak Republic",
        country == "South Korea" ~ "Korea, Rep.",
        country == "Russia" ~"Russian Federation",
        country == "Kyrgyzstan" ~ "Kyrgyz Republic",
        country == "Venezuela" ~ "Venezuela, RB",
        country == "Hong Kong S.A.R., China" ~ "Hong Kong SAR, China",
        country == "Hong Kong" ~ "Hong Kong SAR, China",
        country == "Congo (Brazzaville)" ~ "Congo, Rep.",
        country == "Congo (Kinshasa)" ~ "Congo, Dem. Rep.",
        country == "Laos" ~ "Lao PDR",
        country == "Ivory Coast" ~"Côte d’Ivoire",
        country == "Turkey" ~ "Türkiye",
        country == "Iran" ~ "Iran, Islamic Rep.",
        country == "Palestinian Territories" ~ "West Bank and Gaza",
        country == "Palestine" ~ "West Bank and Gaza",
        country == "Gambia" ~ "Gambia, The",
        country == "Egypt" ~ "Egypt, Arab Rep.",
        country == "Swaziland" ~ "Eswatini",
        country == "Yemen" ~"Yemen, Rep.",
        country == "Macedonia" ~ "North Macedonia",
        country == "Syria" ~ "Syrian Arab Republic",
        country == "Trinidad & Tobago" ~ "Trinidad and Tobago",
        country == "Somaliland" ~ "Somalia",
        country == "Somaliland Region" ~"Somalia",
        country == "Somaliland region" ~"Somalia",
        TRUE ~ country)) |> 
    dplyr::filter(country != "North Cyprus")
```

::::
:::::



###### After cleaning

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-after-cleaning-2012}
: After cleaning 2012
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: after-cleaning-2012

country_names <- base::readRDS("data/countries/country_only.rds")

names_2012_countries <- names_2012_clean |> 
    dplyr::select(1)

dplyr::full_join(
    country_names,
    names_2012_countries,
    by = dplyr::join_by(Country == country)
    ) |> 
    dplyr::slice(219:dplyr::n())
```

::::
:::::

:::

::::
:::::

## Join ladder data

We have now prepared the data for every year separately and can now join them to a single tibble.

:::::{.my-r-code}
:::{.my-r-code-header}
:::::: {#cnj-join-ladder-data-clean}
: Join ladder data from all years
::::::
:::
::::{.my-r-code-container}
```{r}
#| label: join-ladder-data-clean

whr_join_clean <- dplyr::full_join(names_2024_clean, names_2023_clean, by = "country") |> 
    dplyr::full_join(names_2022_clean, by = "country") |> 
    dplyr::full_join(names_2021_clean, by = "country") |> 
    dplyr::full_join(names_2020_clean, by = "country") |> 
    dplyr::full_join(names_2019_clean, by = "country") |> 
    dplyr::full_join(names_2018_clean, by = "country") |> 
    dplyr::full_join(names_2017_clean, by = "country") |> 
    dplyr::full_join(names_2016_clean, by = "country") |> 
    dplyr::full_join(names_2015_clean, by = "country") |> 
    dplyr::full_join(names_2013_clean, by = "country") |> 
    dplyr::full_join(names_2012_clean, by = "country") |> 
    dplyr::arrange(country)


# pb_save_data_file("whr/analysis", whr_join_raw, "whr_join_raw.rds")
# 
# whr_join_raw1 <- dplyr::full_join(ladder_2024, ladder_2023, by = "country")
```

::::
:::::
